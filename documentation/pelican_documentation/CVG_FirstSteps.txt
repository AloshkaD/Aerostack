First steps, CVG_Pelican>
-------------------------

1. Set system-wide  keyboard configuration:
$ sudo dpkg-reconfigure keyboard-configuration 


2. Configure LAN in the Pelican
# Automatic (DHCP), only adresses
# DNS servers: 138.100.4.4, 138.100.73.2

3. Install firefox properly
$ sudo apt-get update
$ sudo apt-get install firefox

4. Install qtcreator
$ sudo apt-get install qtcreator

5. Install cvg_quadrotor_stack
$ cd ~
$ mkdir cvg_ros_workspace
$ cd cvg_ros_workspace
$ sudo apt-get install python-rosinstall
$ # note current ROS version in Pelican is ROS Fuerte
$ rosws init ./ /opt/ros/fuerte
$ rosws set ../ros_workspace
$ mkdir extStack
$ rosws set ./extStack
$ rosws set ./stack --git https://bitbucket.org/joselusl/quadrotor_swarm.git
$ rosws update
$ ./stack/documentation/installation/installers/installWS.sh
$ cd stack
$ ./documentation/installation/installers/installStack.sh
$ cd $DRONE_STACK
$ source setup.sh
$ rospack profile
$ sudo apt-get install python-rosdep
$ rosdep update

To develop software outside the pelican it is necessary to download the following repositories (written as rosws commands):
$ rosws set ./extStack/mav_tools --git https://github.com/ccny-ros-pkg/mav_tools
$ rosws set ./extStack/asctec_drivers --git https://github.com/ccny-ros-pkg/asctec_drivers
$ rosws set ./extStack/px-ros-pkg --git https://github.com/cvg/px-ros-pkg -v rosbuild

# To open droneMidLevelAutopilot and related stuff (such as asctec_drivers, etc) with qt, first create session called "pelican_workspace"
qtcreator -lastsession ./extStack/asctec_drivers/asctec_autopilot/CMakeLists.txt ./extStack/asctec_drivers/asctec_mon/CMakeLists.txt ./extStack/asctec_drivers/asctec_msgs/CMakeLists.txt ./extStack/asctec_drivers/asctec_proc/CMakeLists.txt ./extStack/asctec_drivers/pelican_urdf/CMakeLists.txt ../../mavwork/CMakeLists.txt ./stack/driverPelicanROSModule/CMakeLists.txt ./stack/droneMidLevelAutopilot/CMakeLists.txt ./stack/droneMsgsROS/CMakeLists.txt

# install g++-4.8 to get std-c++11
# --------------------------------
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install gcc-4.8 g++-4.8
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 70 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
g++ --version
gcc --version

# install boost compatible version
# Costa-Rica software suite: (still have to check if is the same for the cvg_quad_stack)
# --------------------------
# boost version history: http://www.boost.org/users/history/
# download boost from: http://sourceforge.net/projects/boost/files/boost/1.49.0/
# install boost, check instruction here: http://ubuntuforums.org/showthread.php?t=1180792
# about the “-mt” suffix in the lib_boost libraries -mt Threading tag: indicates that the library was built with multithreading support enabled. Libraries built without multithreading support can be identified by the absence of -mt.
./bootstrap.sh --with-libraries=filesystem,system,test
./bjam
# ./bjam --clean

# GNU Screen installation:
# ------------------------
# Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells.
# official website: http://www.gnu.org/software/screen/
# easy install in ubuntu: sudo apt-get install screen
# many links: http://aperiodic.net/screen/other_links
# tutorials:  http://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/
# tutorials:  http://aperiodic.net/screen/quick_reference
# tutorials:  http://archive09.linux.com/articles/113657
# tutorials:  http://www.jerri.de/blog/archives/2006/05/02/scripting_screen_for_fun_and_profit/
# note: screen have a configuration file located in $HOME/.screenrc , I am not yet using it
# manual:     http://www.gnu.org/software/screen/manual/screen.html#Silence
sudo apt-get install screen

# Other interesting ubuntu terminal commands:
# -------------------------------------------
# List disk space usage on Ubuntu
# Simply open a new Terminal window and type in this command
df -Th
# check dynamic libraries that an executable is linked to
# located in ${COSTA_RICA}/cvgStack/FileDistributor/utilities/bin
ldd Test_CTime 
# located in /home/asctec/Instaladores/videography-v0.3/bin
ldd FileDistributor 
# more information:
# http://stackoverflow.com/questions/50159/show-all-libraries-used-by-executables-on-linux
# http://stackoverflow.com/questions/1124571/getting-list-of-static-libraries-used-in-an-executable
# http://cboard.cprogramming.com/linux-programming/71132-static-library-how-do-i-list.html
