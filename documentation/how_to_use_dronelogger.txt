Things to add to the ROSModule that wants to log something:

	[Wherever needed] Add DebugStringStackers to the concerned classes:
		[*] Add ROS dependency lib_cvglogger in the manifest
		[*] Add header file: #include "debugstringstacker.h"
		[*] Add variable to class: DebugStringStacker debug_string_stacker;
		[*] Add log message/ling (with unique tag), example: 
				debug_string_stacker << " [tag;subtag;...]" << " x:" << x <<  std::endl;
	
	[Once] Add DroneLoggerROSPublisher to the ROSModule:
		[*] Add ROS dependency lib_cvgloggerROS in the manifest
		[*] Add header file: #include "droneloggerrospublisher.h"
		[*] Add to ROSModule: 
				[*] Member variable:   DroneLoggerROSPublisher drone_logger_ros_publisher;
				[*] In open function:  drone_logger_ros_publisher.open(n);
				[*] In "run" function: drone_logger_ros_publisher.run();
				
	[Topics that have to be logged] Still have to make this part of the documentation
		[*] Add ROS dependency lib_cvgloggerROS in the manifest
		[*] Add to DroneLoggerROSModule:
				[DONE] Add header file: #include "droneloggerrostopicsubscriber.h"
				[*] Ver ${DRONE_STACK}/lib_cvgloggerROS/src/source/code_tests.cpp para ver ejemplo
				[*] Definir callback function a "droneloggerrosmodule.h/cpp", por ejemplo:
					std::string stringCallback(const std_msgs::String::ConstPtr &msg) { return msg->data; }
				[*] Incluir variable DroneLoggerROSTopicSubscriber en DroneLoggerROSModule:
					DroneLoggerROSTopicSubscriber<std_msgs::String::ConstPtr> string_topic_subscriber(n, "prueba.molona", DRONE_LOGGER_EVENTSTRING_PUBL, &stringCallback, 1);
		
Appendix, what packages are involved in the DroneLogger module?
	lib_cvglogger
	lib_cvgloggerROS
	droneMsgsROS
	droneModuleROS
	droneLoggerROSModule
